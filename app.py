import gradio as gr
from NeuralNetwork.generating import caption_image_beam_search, decode_captions
import torch
import pickle
from transformers import BlipProcessor, BlipForConditionalGeneration
from PIL import Image
import pandas as pd
from sentence_transformers import SentenceTransformer
import numpy as np
import ollama
import sys
from torchvision import transforms

# Torch load was not working without this
sys.path.append('NeuralNetwork')

# Load the NN model
encoder = torch.load('NeuralNetwork/encoder.pt')
decoder = torch.load('NeuralNetwork/decoder.pt')
word_map = pickle.load(open('NeuralNetwork/word_map.pkl', 'rb'))

# Generate keywords
def NN_image_to_key_words(input_image):
    seq, alphas = caption_image_beam_search(encoder, decoder, input_image, word_map, 5)
    return decode_captions(seq, word_map)

# Load the HuggingFace model
image_to_caption_processor = BlipProcessor.from_pretrained("Salesforce/blip-image-captioning-large")
image_to_caption_model = BlipForConditionalGeneration.from_pretrained("Salesforce/blip-image-captioning-large")

# Generate caption
def HuggingFace_image_to_caption(image):
    inputs = image_to_caption_processor(images=image, return_tensors="pt")
    caption = image_to_caption_model.generate(**inputs)
    return image_to_caption_processor.decode(caption[0], skip_special_tokens=True)

# Embedding model
embedding_model = SentenceTransformer('BAAI/bge-large-zh-v1.5')

def generate_vector(text):
    return embedding_model.encode(text, normalize_embeddings=True)

# Load quotes
quotes = pd.read_pickle("Quotes/quotes_with_vectors.pkl")

# Top 5 Similar Quotes
def dot_product_search(query, min_popularity):
    popularity_filter = (1 - min_popularity) * len(quotes)
    quotes_filtered = quotes[quotes.index <= popularity_filter]
    query_vector = generate_vector(query)
    top_indexes = quotes_filtered['Vector'].apply(lambda x: np.dot(query_vector, x)).nlargest(5).index
    return quotes_filtered.loc[top_indexes, ['Quote', 'Author']]

# Format Quotes for display
def format_quotes(top_quotes):
    return [f'"{row["Quote"]}"      - {row["Author"]}' for _, row in top_quotes.iterrows()]

# Generate Quote with llama3
def generate_quote(query, top_quotes, temperature):
    top_quotes = top_quotes['Quote'].tolist()
    prompt = f"Generate a quote based on these keywords '{query}' and the following example quotes which may or may not be relevant: {' '.join(top_quotes)}"
    response = ollama.generate(model='llama3', prompt=prompt, stream=False, options={'temperature': temperature}, system="Respond solely with your custom quote in the format of a quote.")
    return response['response'] + "     - Generated by Llama3"

# Gradio interface
def interface(image, text, image_or_text, model, min_popularity, temperature):
    if image_or_text == 'Text':
        query = text
    else:
        image = Image.open(image)
        if model == 'NeuralNetwork':
            # Convert image to tensor
            transform = transforms.Compose([
                transforms.Resize((256, 256)),
                transforms.ToTensor(),
                transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
            ])
            image = transform(image).unsqueeze(0)
            query = NN_image_to_key_words(image)
        else:
            query = HuggingFace_image_to_caption(image)
    
    similar_quotes = dot_product_search(query, min_popularity)
    formatted_quotes = format_quotes(similar_quotes)
    generated_quote = generate_quote(query, similar_quotes, temperature)

    outputs = [query]
    outputs.extend(formatted_quotes)
    outputs.append(generated_quote)

    return outputs

image_input = gr.Image(type="filepath", label="Upload Image")
text_input = gr.Textbox(label="Enter Text")
model_choice = gr.Radio(choices=["NeuralNetwork", "HuggingFace"], label="Model Choice for Image to Text", value="NeuralNetwork")
image_or_text_choice = gr.Radio(choices=["Image", "Text"], label="Input Type", value="Image")
popularity_input = gr.Slider(minimum=0, maximum=0.99, value=0.5, label="Minimum Popularity for Related Quotes (Higher values mean only more popular quotes)")
temperature_input = gr.Slider(minimum=0, maximum=10, value=0.8, label="Temperature for Generated Quote (Higher values lead to more creative outputs)")

query_output = gr.Textbox(label="Keywords/Captions")
related_quotes_output = [gr.Textbox(label=f"Related Quote {i+1}") for i in range(5)]
generated_quote_output = gr.Textbox(label="Generated Quote")

outputs = [query_output] + related_quotes_output + [generated_quote_output]

gr.Interface(fn=interface, inputs=[image_input, text_input, image_or_text_choice, model_choice, popularity_input, temperature_input], outputs=outputs).launch()